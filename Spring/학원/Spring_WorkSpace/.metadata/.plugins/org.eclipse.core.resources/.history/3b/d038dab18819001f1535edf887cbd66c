package net.daum.controller;

import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.servlet.ModelAndView;

import net.daum.service.AdminGongjiService;
import net.daum.vo.GongjiVO;
import net.daum.vo.PageVO;

@Controller
public class AdminGongjiController {

	@Autowired
	private AdminGongjiService adminGongjiService;
	
	//관리자 공지목록
	@GetMapping("/admin_gongji_list")
	public ModelAndView admin_gongji_list(PageVO p,HttpServletRequest request,
			HttpServletResponse response,HttpSession session) throws Exception{
		response.setContentType("text/html;charset=UTF-8");
		
		if(isLogin(session, response)) {
			int page=1;
			int limit=7;//한페이지에 보여지는 목록개수
			if(request.getParameter("page") != null) {
				page = Integer.parseInt(request.getParameter("page"));
			}
			
			String find_name = request.getParameter("find_name");//검색어
			String find_field = request.getParameter("find_field");//검색 필드
			p.setFind_field(find_field); 
			p.setFind_name("%"+find_name+"%");
			
			int listCount = this.adminGongjiService.getListCount(p);//검색전후 게시물수
			
			/* 페이징 */
			p.setStartrow((page-1)*7+1);//시작행 번호
			p.setEndrow(p.getStartrow()+limit-1);//끝행번호
			
			List<GongjiVO> glist = this.adminGongjiService.getGongjiList(p);//검색전후 공지목록
			
			/*페이징 연산*/			
		    int maxpage = (int)((double)listCount/limit+0.95);//총페이지 수
		    int startpage = (((int)((double)page/10+0.9))-1)*10+1;//현재 페이지에 보여질 시작페이지
		    int endpage = maxpage;//현재 페이지에 보여질 마지막 페이지
		    if(endpage > startpage+10-1) endpage = startpage+10-1;
		    
		    ModelAndView listM = new ModelAndView("admin/admin_gongji_list");
		    listM.addObject("glist", glist);
		    listM.addObject("listcount", listCount);
		    listM.addObject("page", page);
		    listM.addObject("startpage", startpage);
		    listM.addObject("endpage", endpage);
		    listM.addObject("maxpage", maxpage);
		    listM.addObject("find_field", find_field);
		    listM.addObject("find_name", find_name);
		    
		    return listM;
		}
		return null;
	}//admin_gongji_list()
	
	//관리자 공지작성
	@GetMapping("/admin_gongji_write")
	public String admin_gongji_write(int page, HttpServletResponse response,HttpSession 
			session,Model m) throws Exception{
		response.setContentType("text/html;charset=UTF-8");
		
		if(isLogin(session, response)) {
			m.addAttribute("page", page);
			return "admin/admin_gongji_write";//뷰페이지 경로 설정
		}		
		return null;
	}//admin_gongji_write()
	
	//관리자 로그아웃 되었을 때 처리하는 부분
	public static boolean isLogin(HttpSession session,HttpServletResponse response)
			throws Exception{
		PrintWriter out=response.getWriter();
		String admin_id=(String)session.getAttribute("admin_id");//관리자 세션 아이디값을 구함

		if(admin_id == null) {
			out.println("<script>");
			out.println("alert('관리자로 다시 로그인 하세요!');");
			out.println("location='admin_Login';");
			out.println("</script>");

			return false;
		}
		return true;
	}//isLogin()
}






