package net.daum.dao;

import java.util.List;
import java.util.Optional;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import net.daum.vo.MemberVO;
import net.daum.vo.ZipCodeVO;

@Repository
public class MemberDAOImpl implements MemberDAO {

	@Autowired //자동 의존성 주입
	private SqlSession sqlSession; //mybatis 쿼리문 수행 sqlSession 의존성 주입
	
	@Autowired
	private MemberRepository memberRepo;
	
	@Autowired
	private ZipCodeRepository zipcodeRepo;

	@Override
	public MemberVO idCheck(String id) {
		//return this.sqlSession.selectOne("m_idcheck", id);//mybatis에서 selectOne()메서드는 단 한개의
		//레코드만 검색, m_idcheck는 member.xml에서 설정할 유일아이디명이다. 
		
		System.out.println("  \n 아이디 중복 검색(JPA) ====================>");
		Optional<MemberVO> resultMember = this.memberRepo.findById(id);
		MemberVO member;
		if(resultMember.isPresent()) {//중복아이디가 있는 경우
			member = resultMember.get();//MemberVO 엔티티빈 객체타입을 구함
		}else {//중복아이디가 없는 경우
			member = null;
		}
		return member;
	}//아이디 중복검색	

	@Override
	public List<ZipCodeVO> zipFind(String dong) {
		//return this.sqlSession.selectList("zip_List", dong);//mybatis에서 selectList()메서드는 하나
		//이상의 레코드를 검색해서 컬렉션 List로 반환
		
		System.out.println(" \n 우편주소 검색(JPA) =====================>");
		List<ZipCodeVO> zlist = this.zipcodeRepo.findByDong(dong);
		return zlist;
	}//우편주소 검색

	@Override
	public void insertMember(MemberVO m) {
		//this.sqlSession.insert("mem_in", m); //mybatis에서 insert()메서드는 레코드를 저장한다.	
		
		System.out.println(" \n 회원저장(JPA) ======================>");
		m.setMem_state(1);//가입회원일때 1 저장
		this.memberRepo.save(m);
	}//회원 저장

	@Override
	public MemberVO pwdMember(MemberVO m) {
		return this.sqlSession.selectOne("p_find",m);
	}//비번찾기->아이디와 회원이름을 기준으로 비번검색

	@Override
	public void updatePwd(MemberVO m) {
		this.sqlSession.update("p_edit", m);//mybatis에서 update()메서드는 레코드를 수정한다. 		
	}//암호화된 임시비번으로 수정

	@Override
	public MemberVO loginCheck(String login_id) {
		return this.sqlSession.selectOne("m_loginCheck", login_id);
	}//로그인 인증 처리

	@Override
	public MemberVO getMember(String id) {		
		return this.sqlSession.selectOne("m_info", id);
	}//아이디에 해당하는 회원정보 보기

	@Override
	public void editMember(MemberVO em) {
		this.sqlSession.update("medit_ok", em);		
	}//정보수정

	@Override
	public void delMem(MemberVO m) {
		this.sqlSession.update("mDel_ok", m);		
	}//회원 탈퇴
}







